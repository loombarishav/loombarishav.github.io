{"version":3,"sources":["List.js","Search.js","App.js","serviceWorker.js","index.js"],"names":["ItemList","_ref","data","_jsx","List","sx","width","maxWidth","bgcolor","children","map","_ref2","index","item","_jsxs","_Fragment","ListItem","alignItems","ListItemText","primary","title","secondary","React","path","Typography","component","variant","color","url","Divider","Search","_useState","useState","_useState2","_slicedToArray","searched","setSearched","_useState3","_useState4","result","setResult","fuse","useRef","requestSearch","searchedVal","useEffect","eligibleProductsForMerchants","Products","filter","each","current","Fuse","keys","name","weight","includeScore","ignoreLocation","threshold","minMatchCharLength","setUpIndexing","length","search","limit","className","SearchBar","value","onChange","searchVal","onCancelSearch","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8QAOe,SAASA,EAAQC,GAAY,IAATC,EAAID,EAAJC,KACjC,OACEC,cAACC,IAAI,CAACC,GAAI,CAAEC,MAAO,OAAQC,SAAU,IAAKC,QAAS,oBAAqBC,SACrEP,EAAKQ,KAAI,SAAAC,EAASC,GAAK,IAAZC,EAAIF,EAAJE,KAAI,OACdC,eAAAC,WAAA,CAAAN,SAAA,CACEN,cAACa,IAAQ,CAACC,WAAW,aAAYR,SAC/BN,cAACe,IAAY,CACXC,QAASN,EAAKO,MACdC,UACEP,eAACQ,WAAc,CAAAb,SAAA,CACZI,EAAKU,MAAQpB,cAACqB,IAAU,CACvBC,UAAU,IACVC,QAAQ,QACRC,MAAM,iBAAgBlB,SAErBI,EAAKU,OAERpB,cAACqB,IAAU,CACTC,UAAU,IACVC,QAAQ,QACRC,MAAM,eAAclB,SAEnBI,EAAKe,aAMhBzB,cAAC0B,IAAO,CAACJ,UAAU,SAClB,KAIX,C,YCmCeK,EApEA,WACb,IAAAC,EAAgCC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAArCI,EAAQF,EAAA,GAAEG,EAAWH,EAAA,GAC5BI,EAA4BL,mBAAS,IAAGM,EAAAJ,YAAAG,EAAA,GAAjCE,EAAMD,EAAA,GAAEE,EAASF,EAAA,GAClBG,EAAOC,iBAAO,MAEdC,EAAgB,SAACC,GACrBR,EAAYQ,EACd,EA4CA,OAXAC,qBAAU,YA3BY,WACpB,IAAMC,EAA+BC,EAASC,QAAO,SAAAC,GAAI,OAAIA,CAAI,IAuBjER,EAAKS,QAAU,IAAIC,IAAKL,EArBR,CACdM,KAAM,CAAC,CACLC,KAAM,aACNC,OAAQ,IAEV,CACED,KAAM,QACNC,OAAQ,KAGVC,cAAc,EACdC,gBAAgB,EAChBC,UAAW,GACXC,mBAAoB,GASxB,CAGEC,EACF,GAAG,IAEHd,qBAAU,WACR,GAAIV,EAASyB,QAAU,EAAG,CACxB,IAAMrB,EAASE,EAAKS,QAAQW,OAAO1B,EAAU,CAAE2B,MAAO,IACtDtB,EAAUD,EACZ,CACF,GAAG,CAACJ,IAGFrB,eAAA,OAAKiD,UAAU,mBAAkBtD,SAAA,CAC7BN,cAAC6D,IAAS,CACRC,MAAO9B,EACP+B,SAAU,SAACC,GAAS,OAAKxB,EAAcwB,EAAU,EACjDC,eAAgB,kBA/CtBhC,EAAY,SACZO,EAAcR,EA8C4B,IAExCrB,eAAA,OAAKiD,UAAU,mBAAkBtD,SAAA,CAC/BN,cAAA,QAAM4D,UAAU,UAAStD,SAAC,mBAC1BN,cAAA,OAAK4D,UAAU,cAAatD,SAC1BN,cAACH,EAAQ,CAACE,KAAMqC,WAK1B,EC7Ce8B,MAvBf,WAaE,OACElE,cAAAY,WAAA,CAAAN,SACEN,cAAA,OAAK4D,UAAU,MAAKtD,SAClBN,cAAC2B,EAAM,OAKf,ECdoBwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACPzE,cAACmB,IAAMuD,WAAU,CAAApE,SACfN,cAACkE,EAAG,MAENS,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,YACf,IACCC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,QACtB,G","file":"static/js/main.ed5ea846.chunk.js","sourcesContent":["import Divider from \"@mui/material/Divider\";\nimport List from \"@mui/material/List\";\nimport ListItem from \"@mui/material/ListItem\";\nimport ListItemText from \"@mui/material/ListItemText\";\nimport Typography from \"@mui/material/Typography\";\nimport * as React from \"react\";\n\nexport default function ItemList({ data }) {\n  return (\n    <List sx={{ width: \"100%\", maxWidth: 360, bgcolor: \"background.paper\" }}>\n      {data.map(({item}, index) => (\n        <>\n          <ListItem alignItems=\"flex-start\">\n            <ListItemText\n              primary={item.title}\n              secondary={\n                <React.Fragment>\n                  {item.path && <Typography\n                    component=\"p\"\n                    variant=\"body3\"\n                    color=\"text.secondary\"\n                  >\n                    {item.path}\n                  </Typography>}\n                  <Typography\n                    component=\"p\"\n                    variant=\"body2\"\n                    color=\"text.primary\"\n                  >\n                    {item.url}\n                  </Typography>\n                </React.Fragment>\n              }\n            />\n          </ListItem>\n          <Divider component=\"li\" />\n        </>\n      ))}\n    </List>\n  );\n}\n","import Fuse from 'fuse.js';\nimport SearchBar from \"material-ui-search-bar\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport './App.css';\nimport ItemList from './List';\nimport Products from './products.json';\n\nconst Search = () => {\n  const [searched, setSearched] = useState(\"\");\n  const [result, setResult] = useState([]);\n  const fuse = useRef(null);\n\n  const requestSearch = (searchedVal) => {\n    setSearched(searchedVal);\n  };\n  const cancelSearch = () => {\n    setSearched(\"\");\n    requestSearch(searched);\n  };\n\n  const setUpIndexing = () => { \n    const eligibleProductsForMerchants = Products.filter(each => each);\n\n    const options = {\n      keys: [{\n        name: 'tags.value',\n        weight: 0.4\n      },\n      {\n        name: 'title',\n        weight: 0.6\n      }],\n      // keys: [],\n      includeScore: true,\n      ignoreLocation: false,\n      threshold: 0.4,\n      minMatchCharLength: 5\n    }\n    \n    // using indexing\n    // const indexedProducts = Fuse.createIndex(eligibleProductsForMerchants.keys, eligibleProductsForMerchants)\n    // fuse.current = new Fuse(eligibleProductsForMerchants, options, indexedProducts);\n\n    // using nested search \n    fuse.current = new Fuse(eligibleProductsForMerchants, options);\n  };\n\n  useEffect(() => {\n    setUpIndexing();\n  }, []);\n\n  useEffect(() => {\n    if (searched.length >= 3) {\n      const result = fuse.current.search(searched, { limit: 7 });\n      setResult(result);\n    }\n  }, [searched]);\n\n  return (\n    <div className=\"search-container\">\n        <SearchBar\n          value={searched}\n          onChange={(searchVal) => requestSearch(searchVal)}\n          onCancelSearch={() => cancelSearch()}\n        />\n      <div className=\"result-container\">\n        <span className=\"heading\">Searched Items</span>\n        <div className=\"result-list\">\n          <ItemList data={result} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Search;","import React from 'react';\nimport './App.css';\nimport Search from './Search';\n// import SearchV2 from './SearchV2';\n\nfunction App() {\n  // const [query, updateQuery] = useState('');\n  // const fuse = new Fuse(characters, {\n  //   keys: [\n  //     'name',\n  //     'company',\n  //     'species'\n  //   ],\n  //   includeScore: true,\n  //   ignoreLocation: true,\n  // });\n  // const results = fuse.search(query);\n\n  return (\n    <>\n      <div className='app'>\n        <Search />\n        {/* <SearchV2 /> */}\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}